{"version":3,"sources":["Components/feedbackOptions/FeedbackOptions.js","Components/notification/Notification.js","Components/statistic/Statistic.js","Components/section/Section.js","Components/App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","className","type","name","onClick","Notification","message","Statistic","props","good","neutral","bad","total","positivePercentage","Section","state","changeState","e","target","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","sum","positiveFeedback","Number","toFixed","title","this","feedback","Component","App","ReactDOM","render","document","getElementById"],"mappings":"kSAiBeA,EAdS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OAC9B,wBAEEC,UAAU,MACVC,KAAK,SACLC,KAAMH,EACNI,QAASR,EALX,SAOGI,GANIA,OCAIK,G,MAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGL,UAAU,QAAb,SAAsBK,MCsBhBC,EAtBG,SAACC,GACjB,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBACnC,OACE,qCACE,oBAAIZ,UAAU,iBAAd,wBACA,+BACE,uCAAUQ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,cCRFC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPK,YAAc,SAACC,GACb,IAAMd,EAAOc,EAAEC,OAAOf,KACtB,EAAKgB,UAAS,SAACC,GAAD,sBAAcjB,EAAOiB,EAAKjB,GAAQ,O,EAElDkB,mBAAqB,WACnB,MAA+B,EAAKN,MAEpC,OAFA,EAAQN,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBW,gCAAkC,WAChC,IAAMC,EAAM,EAAKF,qBACXG,EAAmBD,EAAO,EAAKR,MAAMN,KAAOc,EAAO,IAAM,EAC/D,OAAOE,OAAOD,GAAkBE,QAAQ,I,4CAE1C,WACE,IAAQC,EAAUC,KAAKpB,MAAfmB,MACFf,EAAQgB,KAAKP,qBACbQ,EAAWD,KAAKN,kCACtB,OACE,gCACE,oBAAIrB,UAAU,eAAd,SAA8B0B,IAE9B,cAAC,EAAD,CACE/B,gBAAiBgC,KAAKZ,YACtBrB,QAASiC,KAAKb,QAGhB,uBACCH,EACC,cAAC,EAAD,CACEH,KAAMmB,KAAKb,MAAMN,KACjBC,QAASkB,KAAKb,MAAML,QACpBC,IAAKiB,KAAKb,MAAMJ,IAChBC,MAAOA,EACPC,mBAAoBgB,IAGtB,cAAC,EAAD,CAAcvB,QAAQ,6B,GA3CVwB,aAkDPhB,IC5CAiB,EARH,WACV,OACE,mCACE,cAAC,EAAD,CAASJ,MAAM,6B,MCDrBK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.95d7e3bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FeedbackOptions.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return Object.keys(options).map((item) => (\r\n    <button\r\n      key={item}\r\n      className=\"btn\"\r\n      type=\"button\"\r\n      name={item}\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      {item}\r\n    </button>\r\n  ));\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport \"./Notification.css\";\r\nconst Notification = ({ message }) => {\r\n  return <p className=\"title\">{message}</p>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistic = (props) => {\r\n  const { good, neutral, bad, total, positivePercentage } = props;\r\n  return (\r\n    <>\r\n      <h2 className=\"titleStatistic\">Statistics</h2>\r\n      <ul>\r\n        <li>Good:{good}</li>\r\n        <li>Neutral:{neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        <li>Positive feedback:{positivePercentage}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistic;\r\n","import React, { Component } from \"react\";\r\nimport FeedbackOptions from \"../feedbackOptions/FeedbackOptions.js\";\r\nimport Notification from \"../notification/Notification.js\";\r\nimport Statistics from \"../statistic/Statistic.js\";\r\n\r\nclass Section extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  changeState = (e) => {\r\n    const name = e.target.name;\r\n    this.setState((prev) => ({ [name]: prev[name] + 1 }));\r\n  };\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n    return total;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    const sum = this.countTotalFeedback();\r\n    const positiveFeedback = sum ? (this.state.good / sum) * 100 : 0;\r\n    return Number(positiveFeedback).toFixed(0);\r\n  };\r\n  render() {\r\n    const { title } = this.props;\r\n    const total = this.countTotalFeedback();\r\n    const feedback = this.countPositiveFeedbackPercentage();\r\n    return (\r\n      <div>\r\n        <h1 className=\"titleFitback\">{title}</h1>\r\n\r\n        <FeedbackOptions\r\n          onLeaveFeedback={this.changeState}\r\n          options={this.state}\r\n        />\r\n\r\n        <hr />\r\n        {total ? (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={total}\r\n            positivePercentage={feedback}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport Section from \"./section/Section\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Section title=\"Please leave feedback\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Components/App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}